extend type Query {
    filterAllOrder(input: FilterAllOrderInput!): FilterAllOrdersResponse!

    getOrderById(id: Int!): Order!
}

extend type Mutation {
    createOrder(input: CreateOrderInput!): Order!

    updateOrder(input: UpdateOrderInput!): SuccessResponse!

    deleteOrder(input: DeleteOrderInput!): SuccessResponse!
}

enum StatusOrder {
    creatNew
    priceQuotation
    createExportOrder
    delivery
    successDelivery
    paymentConfirmation
    paid
    done
}

type OrderConnection{
    edges: [OrderEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type OrderEdge {
    cursor: String!
    node: Order
}

input CreateOrderInput {
    customerId: Int!
    saleId: Int!
    VAT: Float
    discount: Float
}

input UpdateOrderInput {
    orderId: Int!
    customerId: Int
    saleId: Int
    VAT: Float
    discount: Float
    status: StatusOrder
    driver: Int
}

type OrderDetail {
    id: Int!
    itemGroup: ItemGroup!
    product: Product!
    quantity: Float!
    priceProduct: Float!
    weightProduct: Float
    totalWeight: Float
    description: String
    createdAt: Date
    updatedAt: Date
}

type Order {
    id: Int!
    customer: Customer!
    sale: User!
    invoiceNo: String!
    VAT: Float
    discount: Float
    status: StatusOrder
    driver: User
    freightPrice: Float
    percentOfAdvancePayment: Float
    reportingValidityAmount: Int
    deliveryMethodDescription: String
    executionTimeDescription: String
    freightMessage: String
    deliverAddress: String
    itemGroupList: [ItemGroup]
    paymentList: [PaymentInfor]
    deliverOrderList: [DeliverOrder]
    totalMoney: Float
    remainingPaymentMoney: Float
    createdAt: Date
    updatedAt: Date
}

input FilterAllOrderInput {
    queryString: String
    status: StatusOrder
    saleId: Int
    createAt: filterDate
    args: PaginationInput
}

input filterDate{
    startAt: Date!
    endAt: Date!
}

type FilterAllOrdersResponse {
    orders: OrderConnection
    totalRevenue: Float
    totalCompleted: Float
    totalPaid: Float
    totalDeliver: Float
    allOrderCounter: Int!
    creatNewOrderCounter: Int!
    priceQuotationOrderCounter: Int!
    createExportOrderCounter: Int!
    deliveryOrderCounter: Int!
    successDeliveryOrderCounter: Int!
    paymentConfirmationOrderCounter: Int!
    paidOrderCounter: Int!
    doneOrderCounter: Int!
}

input  DeleteOrderInput {
    orderId: Int!
}