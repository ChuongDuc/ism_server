 extend type Query {
     listUserNotification(input: ListUserNotificationInput!): UserNotificationConnection!
     listArrayUserNotification(input: ListArrayUserNotificationInput!): UserNotificationConnection!
 }

 extend type Mutation {
     updateStatusUserNotification(input: UpdateStatusUserNotificationInput!): SuccessResponse!
 }

 type UserNotification {
     id:Int!
     user: User!
     notification: Notification!
     isRead: Boolean!
     createdAt: Date
     updatedAt: Date
 }

 type UserNotificationConnection{
     edges: [UserNotificationEdge]
     pageInfo: PageInfo!
     totalCount: Int!
 }

 type UserNotificationEdge {
     cursor: String!
     node: UserNotification
 }

 input ListUserNotificationInput{
     userId: Int!
     event: NotificationEvent
     args: PaginationInput
 }

 input ListArrayUserNotificationInput{
     userId: Int!
     event: NotificationEvent
     args: PaginationInput
 }

 input UpdateStatusUserNotificationInput {
     userNotificationIds: [Int!]!
     isRead: Boolean!
 }

