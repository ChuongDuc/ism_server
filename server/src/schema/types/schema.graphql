# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Category {
    createdAt: Date
    id: Int
    name: String
    updatedAt: Date
}

type Customer {
    address: String
    company: String
    createdAt: Date
    email: String
    id: Int!
    name: String
    phoneNumber: String!
    updatedAt: Date
}

type CustomerConnection {
    edges: [CustomerEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type CustomerEdge {
    cursor: String!
    node: Customer
}

type Inventory {
    code: String!
    createdAt: Date
    fileName: String!
    id: Int!
    productName: String!
    quantity: Float!
    unit: String!
    updatedAt: Date
    weight: Float
}

type InventoryConnection {
    edges: [InventoryEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type InventoryEdge {
    cursor: String!
    node: Inventory
}

type Mutation {
    createCategory(input: CreateCategoryInput!): Category!
    createCustomer(input: CreateCustomerInput!): Customer!
    createProduct(input: CreateProductInput!): Product!
    createUser(input: CreateUserInput!): User!
    deleteCustomer(input: DeleteCustomerInput!): SuccessResponse!
    deleteProductById(input: DeleteProductByIdInput!): SuccessResponse!
    deleteUser(input: DeleteUserInput!): SuccessResponse!
    importFileExcelInventory(input: ImportFileExcelInventoryInput!): [Inventory]!
    importFileExcelProducts(input: ImportFileExcelProductsInput!): [Product]!
    updateCategory(input: UpdateCategoryInput!): SuccessResponse!
    updateCustomer(input: UpdateCustomerInput!): SuccessResponse!
    updateProductById(input: UpdateProductByIdInput!): SuccessResponse!
    updateProductPriceById(input: UpdateProductPriceByIdInput!): SuccessResponse!
    updateUser(input: UpdateUserInput!): SuccessResponse!
}

type PageInfo {
    endCursor: Cursor
    hasNextPage: Boolean!
}

type Product {
    category: Category!
    code: String
    createdAt: Date
    description: String
    height: Float!
    id: Int!
    name: String!
    price: Float!
    unit: Unit
    updatedAt: Date
    weight: Float!
    width: Float
}

type ProductConnection {
    edges: [ProductEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type ProductEdge {
    cursor: String!
    node: Product
}

type Query {
    getAllCategory: [Category]!
    listAllCustomer(input: ListAllCustomerInput!): CustomerConnection!
    listAllInventory(input: ListAllInventoryInput!): InventoryConnection!
    listAllProducts(input: ListAllProductsInput!): ProductConnection!
    login(input: UserLoginInput!): UserLoginResponse!
    me: User!
    productDetail(input: ProductDetailInput!): Product!
    users(input: UsersInput!): UserConnection!
}

type Subscription {
    subscribeNotifications: User!
}

type User {
    address: String
    avatarURL: String
    createdAt: Date
    email: String
    firstName: String!
    fullName: String!
    id: Int!
    isActive: Boolean
    lastName: String!
    phoneNumber: String!
    role: Role
    updatedAt: Date
    userName: String!
}

type UserConnection {
    edges: [UserEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type UserEdge {
    cursor: String!
    node: User
}

type UserLoginResponse {
    token: String!
    user: User!
}

enum Role {
    Accountant
    Admin
    AssistantDriver
    Director
    Driver
    Manager
    Sales
    TransporterManager
}

enum SuccessResponse {
    success
}

enum Unit {
    cai
    chiec
    cuon
    kg
    m
    m2
    md
    pipe
    plate
}

scalar Cursor

scalar Date

scalar JSON

scalar Upload

input CreateCategoryInput {
    name: String!
}

input CreateCustomerInput {
    address: String
    company: String
    email: String
    name: String
    phoneNumber: String!
}

input CreateProductInput {
    categoryId: Int!
    code: String
    description: String
    height: Float!
    price: Float!
    productName: String!
    unit: Unit
    weight: Float!
}

input CreateUserInput {
    address: String
    avatar: Upload
    email: String
    firstName: String!
    lastName: String!
    password: String!
    phoneNumber: String!
    role: Role!
    userName: String!
}

input DeleteCustomerInput {
    ids: [Int!]!
}

input DeleteProductByIdInput {
    productId: [Int!]!
}

input DeleteUserInput {
    ids: [Int!]!
}

input ImportFileExcelInventoryInput {
    fileExcelInventory: Upload!
    fileName: String!
}

input ImportFileExcelProductsInput {
    categoryId: Int!
    fileExcelProducts: Upload!
}

input ListAllCustomerInput {
    args: PaginationInput
    searchQuery: String
}

input ListAllInventoryInput {
    args: PaginationInput
    searchQuery: String
}

input ListAllProductsInput {
    args: PaginationInput
    category: Int
    name: String
    unit: Unit
}

input PaginationInput {
    after: Cursor
    before: Cursor
    first: Int
    last: Int
}

input ProductDetailInput {
    id: Int!
}

input UpdateCategoryInput {
    id: Int!
    name: String
}

input UpdateCustomerInput {
    address: String
    company: String
    email: String
    id: Int!
    name: String
    phoneNumber: String
}

input UpdateProductByIdInput {
    categoryId: Int!
    height: Float
    name: String
    price: Float
    productId: Int!
    unit: Unit
    weight: Float
}

input UpdateProductPriceByIdInput {
    price: Float
    productId: [Int!]!
}

input UpdateUserInput {
    address: String
    avatarURL: Upload
    email: String
    firstName: String
    id: Int!
    isActive: Boolean
    lastName: String
    newPassword: String
    oldPassword: String
    phoneNumber: String
    role: Role
    userName: String
}

input UserLoginInput {
    account: String!
    password: String!
}

input UsersInput {
    args: PaginationInput
    isActive: Boolean
    role: Role
    searchQuery: String
}
