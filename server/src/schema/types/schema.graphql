# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Customer {
    address: String
    company: String
    createdAt: Date
    email: String
    id: Int!
    name: String
    phoneNumber: String!
    updatedAt: Date
}

type CustomerConnection {
    edges: [CustomerEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type CustomerEdge {
    cursor: String!
    node: Customer
}

type Inventory {
    code: String!
    createdAt: Date
    fileName: String!
    id: Int!
    productName: String!
    quantity: Float!
    unit: String!
    updatedAt: Date
    weight: Float
}

type InventoryConnection {
    edges: [InventoryEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type InventoryEdge {
    cursor: String!
    node: Inventory
}

type Mutation {
    createCustomer(input: CreateCustomerInput!): Customer!
    createUser(input: CreateUserInput!): User!
    deleteCustomer(input: DeleteCustomerInput!): SuccessResponse!
    deleteUser(input: DeleteUserInput!): SuccessResponse!
    importFileExcelInventory(input: ImportFileExcelInventoryInput!): [Inventory]!
    updateCustomer(input: UpdateCustomerInput!): SuccessResponse!
    updateUser(input: UpdateUserInput!): SuccessResponse!
}

type PageInfo {
    endCursor: Cursor
    hasNextPage: Boolean!
}

type Query {
    listAllCustomer(input: ListAllCustomerInput!): CustomerConnection!
    listAllInventory(input: ListAllInventoryInput!): InventoryConnection!
    login(input: UserLoginInput!): UserLoginResponse!
    me: User!
    users(input: UsersInput!): UserConnection!
}

type Subscription {
    subscribeNotifications: User!
}

type User {
    address: String
    avatarURL: String
    createdAt: Date
    email: String
    firstName: String!
    fullName: String!
    id: Int!
    isActive: Boolean
    lastName: String!
    phoneNumber: String!
    role: Role
    updatedAt: Date
    userName: String!
}

type UserConnection {
    edges: [UserEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type UserEdge {
    cursor: String!
    node: User
}

type UserLoginResponse {
    token: String!
    user: User!
}

enum Role {
    Accountant
    Admin
    AssistantDriver
    Director
    Driver
    Manager
    Sales
    TransporterManager
}

enum SuccessResponse {
    success
}

scalar Cursor

scalar Date

scalar JSON

scalar Upload

input CreateCustomerInput {
    address: String
    company: String
    email: String
    name: String
    phoneNumber: String!
}

input CreateUserInput {
    address: String
    avatar: Upload
    email: String
    firstName: String!
    lastName: String!
    password: String!
    phoneNumber: String!
    role: Role!
    userName: String!
}

input DeleteCustomerInput {
    ids: [Int!]!
}

input DeleteUserInput {
    ids: [Int!]!
}

input ImportFileExcelInventoryInput {
    fileExcelInventory: Upload!
    fileName: String!
}

input ListAllCustomerInput {
    args: PaginationInput
    searchQuery: String
}

input ListAllInventoryInput {
    args: PaginationInput
    searchQuery: String
}

input PaginationInput {
    after: Cursor
    before: Cursor
    first: Int
    last: Int
}

input UpdateCustomerInput {
    address: String
    company: String
    email: String
    id: Int!
    name: String
    phoneNumber: String
}

input UpdateUserInput {
    address: String
    avatarURL: Upload
    email: String
    firstName: String
    id: Int!
    isActive: Boolean
    lastName: String
    newPassword: String
    oldPassword: String
    phoneNumber: String
    role: Role
    userName: String
}

input UserLoginInput {
    account: String!
    password: String!
}

input UsersInput {
    args: PaginationInput
    isActive: Boolean
    role: Role
    searchQuery: String
}
