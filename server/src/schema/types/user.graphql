extend type Query {
    me: User!

    login(input: UserLoginInput!): UserLoginResponse!

    users(input: UsersInput!): UserConnection!

    getUserById(userId: Int!): User!

    salesReportRevenueByWeek(input: SalesReportRevenueByWeekInput!): [SalesReportRevenueByWeekResponse]!

    salesReportRevenueByYear(input: SalesReportRevenueByYearInput!): [SalesReportRevenueByYearResponse]!

    adminReportRevenueByMonth(input: AdminReportRevenueByMonthInput!): [AdminReportRevenueByMonthResponse]!
}

extend type Mutation {
    resetPassword(input: ResetPasswordInput!): SuccessResponse!

    createUser(input: CreateUserInput!): User!

    updateUser(input: UpdateUserInput!): SuccessResponse!

    deleteUser(input: DeleteUserInput!): SuccessResponse!

}

extend type Subscription {
    subscribeNotifications(input: SubscribeNotificationsInput!): NotificationResponse!
}

enum Role {
    Director
    Admin
    Manager
    Accountant
    Sales
    TransporterManager
    Driver
    AssistantDriver
}

type User {
    id: Int!
    email: String
    userName: String!
    firstName: String!
    lastName: String!
    fullName: String!
    phoneNumber: String!
    address: String
    avatarURL: String
    isActive: Boolean
    role: Role
    createdAt: Date
    updatedAt: Date
}

type UserLoginResponse {
    token: String!
    user: User!
}

input ResetPasswordInput {
    userId: Int!
}

type UserConnection {
    edges: [UserEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type UserEdge {
    cursor: String!
    node: User
}

type PageInfo {
    endCursor: Cursor
    hasNextPage: Boolean!
}

type NotificationResponse {
    message: String!
    notification: Notification
    order: Order
}

input UserLoginInput {
    account: String!
    password: String!
}

input CreateUserInput {
    email: String
    userName: String!
    phoneNumber: String!
    address: String
    password: String!
    firstName: String!
    lastName: String!
    role: Role!
    avatar:Upload
}

input UpdateUserInput {
    id: Int!
    email: String
    userName: String
    firstName: String
    lastName: String
    phoneNumber: String
    address: String
    avatarURL: Upload
    isActive: Boolean
    role: Role
    oldPassword: String
    newPassword: String
}

input DeleteUserInput {
    ids: [Int!]!
}

input UsersInput {
    args: PaginationInput
    isActive: Boolean
    role: Role
    searchQuery: String
}

input SalesReportRevenueByWeekInput {
    saleId: Int!
    endAt: Date!
    startAt: Date!
}

input SalesReportRevenueByYearInput {
    saleId: Int!
    endAt: Date!
    startAt: Date!
}

input AdminReportRevenueByMonthInput {
    endAt: Date!
    startAt: Date!
}

type AdminReportRevenueByMonthResponse {
    sale: String!
    totalRevenue: Float!
    totalOrder: Int!
}

type SalesReportRevenueByWeekResponse {
    date: Date!
    totalRevenue: Float!
}

type SalesReportRevenueByYearResponse {
    month: Int!
    totalRevenue: Float!
}


input SubscribeNotificationsInput {
    "excludingEvent: Khi user không muốn nhận thông từ 1 sự kiện nào đó"
    excludingEvent: [NotificationEvent!]
    "#### User Id: ID của user sẽ nhận đc các thông báo"
    userId: Int!
}